<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Wishlist - ToughToes</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/home.css">
  <link rel="stylesheet" href="/css/wishlist.css">

  <link rel="stylesheet" href="/css/common.css" />
  <link rel="stylesheet" href="/css/footer.css" />

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
  <%- include('../partials/user-navbar', { name: name }) %>


  
  <main>
    <div class="wishlist-container">
      <div class="wishlist-header">
        <h1>My Wishlist</h1>
        <p><%= typeof itemCount !== 'undefined' ? itemCount : (items ? items.length : 0) %> items saved for later</p>
      </div>

      <% if (items && items.length > 0) { %>
        <div class="wishlist-items">
          <% items.forEach(item => { %>
            <div class="wishlist-item">
              <img src="<%= item.image %>" alt="<%= item.name %>">
              <div class="wishlist-item-details">
                <h3 class="wishlist-item-name"><%= item.name %></h3>
                <p class="wishlist-item-info">Category: <%= item.category %></p>
                <div class="wishlist-item-price">
                  <strong>â‚¹<%= item.price ? item.price.toFixed(2) : 'N/A' %></strong>
                </div>
                <div class="wishlist-item-actions">
                  <% if (item.stock === 0) { %>
                    <button class="add-to-cart-btn btn btn-secondary" wishlist-entry-id="<%= item._id %>" disabled>Out of Stock</button>
                  <% } else { %>
                    <button class="add-to-cart-btn btn btn-primary" wishlist-entry-id="<%= item._id %>">Add to Cart</button>
                  <% } %>
                  <button class="remove-wishlist-btn btn btn-outline-danger" wishlist-entry-id="<%= item._id %>">Remove from Wishlist</button>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
    <% } else { %>
      <div class="empty-wishlist">
        <p>No items in your wishlist yet.</p>
      </div>
    <% } %>
  </div>

  <script>
    
    document.querySelectorAll('.remove-wishlist-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const wishlistId = this.getAttribute('wishlist-entry-id');
        fetch('/wishlist/remove', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ wishlistId })
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            this.closest('.wishlist-item').remove();
            const countElem = document.querySelector('.wishlist-header p');
            if (countElem) {
              let count = parseInt(countElem.textContent);
              if (!isNaN(count) && count > 0) {
                countElem.textContent = (count - 1) + ' items saved for later';
              }
            }
            if (document.querySelectorAll('.wishlist-item').length === 0) {
              location.reload();
            }
          } else {
            alert(data.message || 'Could not remove from wishlist.');
          }
        })
        .catch(() => alert('Could not remove from wishlist.'));
      });
    });

    
    document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        if (this.disabled) return;
        const wishlistId = this.getAttribute('wishlist-entry-id');
        
        if (this.textContent.trim().toLowerCase() === 'out of stock') {
          if (typeof Swal !== 'undefined') {
            Swal.fire({
              title: 'Out of Stock',
              text: 'Sorry, this product is currently out of stock and cannot be added to your cart.',
              icon: 'error'
            });
          } else {
            alert('Sorry, this product is currently out of stock and cannot be added to your cart.');
          }
          return;
        }

        fetch('/wishlist/move-to-cart', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ wishlistId })
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            this.closest('.wishlist-item').remove();
            const countElem = document.querySelector('.wishlist-header p');
            if (countElem) {
              let count = parseInt(countElem.textContent);
              if (!isNaN(count) && count > 0) {
                countElem.textContent = (count - 1) + ' items saved for later';
              }
            }
            if (document.querySelectorAll('.wishlist-item').length === 0) {
              location.reload();
            }
          } else {
            if (typeof Swal !== 'undefined' && (data.message || '').toLowerCase().includes('stock')) {
              Swal.fire({
                title: 'Out of Stock',
                text: data.message,
                icon: 'error'
              });
            } else {
              alert(data.message || 'Could not add to cart.');
            }
          }
        })
        .catch(() => {
          if (typeof Swal !== 'undefined') {
            Swal.fire({
              title: 'Error',
              text: 'Could not add to cart.',
              icon: 'error'
            });
          } else {
            alert('Could not add to cart.');
          }
        });
      });
    });
  </script>
  </main>

  <%- include('../partials/footer') %>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
