<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= mode === 'edit' ? 'Edit Product' : 'Add New Product' %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <style>
      .image-preview img {
        width: 60px;
        height: 60px;
        object-fit: cover;
        margin-right: 5px;
        border-radius: 4px;
      }
      
      /* Modal styles */
      #cropperModal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: #ffffff;
        z-index: 9999;
      }

      /* Container for cropper */
      #cropperModal .cropper-container {
        position: relative;
        width: 90%;
        max-width: 800px;
        margin: 40px auto;
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      /* Wrapper for image */
      #cropperModal .cropper-wrapper {
        width: 100%;
        height: 500px;
        margin-bottom: 20px;
        background: white;
        position: relative;
        overflow: hidden;
      }

      /* Image to crop */
      #cropperModal .cropper-wrapper img {
        max-width: 100%;
        max-height: 100%;
        display: block;
      }

      /* Cropper overrides */
      .cropper-view-box {
        outline: 1px solid #39f;
        outline-color: rgba(51, 153, 255, 0.75);
      }

      .cropper-face {
        background-color: #fff;
        left: 0;
        opacity: 0.1;
        position: absolute;
        top: 0;
      }

      .cropper-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
      }

      .variation-box {
        border: 1px solid #ccc;
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 8px;
        position: relative;
      }
      .remove-btn {
        position: absolute;
        top: 8px;
        right: 8px;
        background: transparent;
        border: none;
        color: red;
        font-size: 1.2rem;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <div class="container-fluid">
      <div class="row">
        <%- include('../partials/sidebar') %>

        <div class="col-md-10 p-4">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <h4>
              <%= mode === 'edit' ? 'Edit Product' : 'Add New Product' %>
            </h4>
            <div><%= name %> <i class="fa-solid fa-user ms-2"></i></div>
          </div>

          <form
            id="productForm"
            action="<%= mode === 'edit' && product ? ('/admin/products/edit/' + product._id) : '/admin/products/add' %>"
            method="POST"
            enctype="multipart/form-data"
          >
            <p class="text-muted">
              <%= mode === 'edit' ? 'Edit the product details below' : 'Fill in the product details to add a new shoe to your inventory' %>
            </p>

            <div class="row mb-3">
              <div class="col-md-6">
                <label>Product Name</label>
                <input
                  type="text"
                  name="name"
                  class="form-control"
                  placeholder="Enter product name"
                  value="<%= product ? product.name : '' %>"
                  required
                />
              </div>
              <div class="col-md-6">
                <label>Product SKU</label>
                <input
                  type="text"
                  name="sku"
                  class="form-control"
                  placeholder="SKU-001"
                  value="<%= product ? product.product_sku : '' %>"
                  required
                  <%= mode === 'edit' ? 'readonly' : '' %>
                />
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <label>Price ($)</label>
                <input
                  type="number"
                  name="price"
                  step="0.01"
                  min="0"
                  class="form-control"
                  value="<%= product ? product.price : '' %>"
                  required
                />
              </div>
              <div class="col-md-6">
                <label>Discount (%)</label>
                <input
                  type="number"
                  name="discount"
                  step="0.01"
                  min="0"
                  class="form-control"
                  value="<%= product ? product.discount_percentage : '' %>"
                />
              </div>
            </div>

            <div class="mb-3">
              <label>Product Description</label>
              <textarea
                name="description"
                class="form-control"
                rows="3"
                placeholder="Enter detailed product description..."
                required
              ><%= product ? product.description : '' %></textarea>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <label>Category</label>
                <select name="category" class="form-select" required>
                  <option value="">Select Category</option>
                  <% categories.forEach(category => { %>
                  <option value="<%= category.category %>" <%= product && product.product_category === category.category ? 'selected' : '' %>>
                    <%= category.category %>
                  </option>
                  <% }) %>
                </select>
              </div>
              <div class="col-md-6">
                <label>Shoe Type</label>
                <select name="type" class="form-select" required>
                  <option value="">Select Type</option>
                  <% types.forEach(type => { %>
                  <option value="<%= type.type %>" <%= product && product.product_type === type.type ? 'selected' : '' %>><%= type.type %></option>
                  <% }) %>
                </select>
              </div>
            </div>

            <div class="mb-4">
              <label>Product Variations</label>
              <div id="variationsContainer"></div>
              <button
                type="button"
                class="btn btn-outline-primary mt-2"
                onclick="addVariation()"
              >
                + Add Variation
              </button>
            </div>

            <div class="d-flex justify-content-end gap-2">
              <a href="/admin/products?limit=5&skip=0" class="btn btn-outline-secondary"
                >Cancel</a
              >
              <button type="submit" class="btn btn-dark"><%= mode === 'edit' ? 'Update Product' : 'Add Product' %></button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <script>
      let variationIndex = 0;
      const variationFiles = {}; // Track files by variation

      function addVariation(data = {}) {
        const index = data.index ?? variationIndex;
        const container = document.createElement("div");
        container.className = "variation-box";
        container.dataset.index = index;

        container.innerHTML = `
      <span class="remove-btn" onclick="this.parentElement.remove()">&times;</span>
      <div class="row g-3 align-items-end">
        <div class="col-md-3">
          <label>Size</label>
          <select name="variations[${index}][size]" class="form-select" required>
            <option value="">Select</option>
            <% sizes.forEach(size => { %>
              <option value="<%= size.size %>" ${data.size === "<%= size.size %>" ? 'selected' : ''}><%= size.size %></option>
            <% }) %>
          </select>
        </div>
        <div class="col-md-3">
          <label>Color</label>
          <select name="variations[${index}][color]" class="form-select" required>
            <option value="">Select</option>
            <% colors.forEach(color => { %>
              <option value="<%= color.color %>" ${data.color === "<%= color.color %>" ? 'selected' : ''}><%= color.color %></option>
            <% }) %>
          </select>
        </div>
        <div class="col-md-2">
          <label>Stock Quantity</label>
          <input type="number" name="variations[${index}][stock]" class="form-control" min="0" value="${data.stock ?? ''}" required />
        </div>
        <div class="col-md-4">
          <label>Images</label>
          <button type="button" class="btn btn-outline-secondary w-100" onclick="triggerImageUpload(this)">+ Add Image</button>
          <input type="file" accept="image/*" style="display:none" multiple />
          <div class="image-preview mt-2">
            ${(data.images || []).map(url => `<img src="${url}" />`).join('')}
          </div>
        </div>
      </div>
    `;

        const fileInput = container.querySelector('input[type="file"]');
        const previewBox = container.querySelector(".image-preview");
        variationFiles[index] = [];

        fileInput.addEventListener("change", function () {
          const files = Array.from(this.files);
          variationFiles[index].push(...files);

          previewBox.innerHTML = "";
          variationFiles[index].forEach((file) => {
            const reader = new FileReader();
            reader.onload = (e) => {
              const img = document.createElement("img");
              img.src = e.target.result;
              previewBox.appendChild(img);
            };
            reader.readAsDataURL(file);
          });
        });

        document.getElementById("variationsContainer").appendChild(container);
        variationIndex = Math.max(variationIndex, index + 1);
      }

      function triggerImageUpload(button) {
        const input = button.nextElementSibling;
        input.click();
      }


      document.getElementById("productForm").addEventListener("submit", function (e) {
        // Re-index all variation fields in the DOM
        const variationBoxes = document.querySelectorAll('.variation-box');
        variationBoxes.forEach((box, newIdx) => {
          // Update dataset
          box.dataset.index = newIdx;
          // Update all input/select names inside this box
          box.querySelectorAll('[name]').forEach(input => {
            input.name = input.name.replace(/variations\[\d+\]/, `variations[${newIdx}]`);
          });
        });

        // Rebuild variationFiles with new indices
        const newVariationFiles = {};
        variationBoxes.forEach((box, newIdx) => {
          const oldIdx = box.dataset.index;
          newVariationFiles[newIdx] = variationFiles[oldIdx] || [];
        });
        // Clear old variationFiles and copy new
        Object.keys(variationFiles).forEach(k => delete variationFiles[k]);
        Object.assign(variationFiles, newVariationFiles);

        const formData = new FormData(this);
        Object.entries(variationFiles).forEach(([index, files]) => {
          files.forEach((file) => {
            formData.append(`variationImages_${index}`, file);
          });
        });

        fetch(this.action, {
          method: this.method,
          body: formData,
        }).then((res) => {
          if (res.ok) {
            window.location = "/admin/products";
          } else {
            alert("Product submission failed");
          }
        });

        e.preventDefault();
      });

      // If in edit mode, pre-populate variations
      <% if (mode === 'edit' && product && product.variations && product.variations.length) { %>
        const editVariations = <%- JSON.stringify(product.variations) %>;
        window.onload = function() {
          editVariations.forEach(function(v, i) {
            addVariation({
              index: i,
              size: v.size,
              color: v.color,
              stock: v.stock,
              images: v.images || []
            });
          });
        };
      <% } %>
  </script>

  <!-- Cropper Modal -->
  <div class="cropper-modal" id="cropperModal">
    <div class="cropper-container">
      <div class="cropper-wrapper">
        <img id="cropperImage" src="" alt="Image to crop">
      </div>
      <div class="cropper-buttons">
        <button type="button" class="btn btn-secondary" onclick="cancelCrop()">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="completeCrop()">Crop & Save</button>
      </div>
    </div>
  </div>

  <!-- Prevent background scrolling when modal is open -->
  <style>
    body.cropper-active {
      overflow: hidden;
      padding-right: 17px; /* Prevent layout shift */
    }
  </style>

  <script>
    let activeCropper = null;
    let currentFileInput = null;
    let currentPreviewBox = null;
    
    function startCrop(file, fileInput, previewBox) {
      const reader = new FileReader();
      reader.onload = function(e) {
        const modal = document.getElementById('cropperModal');
        const image = document.getElementById('cropperImage');
        
        // Reset cropper if exists
        if (activeCropper) {
          activeCropper.destroy();
        }
        
        // Show modal and setup image
        modal.style.display = 'block';
        document.body.classList.add('cropper-active');
        image.src = e.target.result;
        
        // Initialize cropper
        activeCropper = new Cropper(image, {
          aspectRatio: 1,
          viewMode: 2,
          autoCropArea: 1,
        });
        
        // Store references
        currentFileInput = fileInput;
        currentPreviewBox = previewBox;
      };
      reader.readAsDataURL(file);
    }
    
    function cancelCrop() {
      const modal = document.getElementById('cropperModal');
      modal.style.display = 'none';
      document.body.classList.remove('cropper-active');
      if (activeCropper) {
        activeCropper.destroy();
        activeCropper = null;
      }
      if (currentFileInput) {
        currentFileInput.value = '';
      }
    }
    
    function completeCrop() {
      if (!activeCropper) return;
      
      // Get the cropped canvas
      const canvas = activeCropper.getCroppedCanvas({
        width: 600,
        height: 600,
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high',
      });
      
      // Convert canvas to blob
      canvas.toBlob((blob) => {
        // Create a new file from the blob
        const croppedFile = new File([blob], 'cropped.jpg', {
          type: 'image/jpeg',
          lastModified: new Date().getTime()
        });
        
        // Create a preview
        const reader = new FileReader();
        reader.onload = function(e) {
          const img = document.createElement('img');
          img.src = e.target.result;
          currentPreviewBox.innerHTML = '';
          currentPreviewBox.appendChild(img);
        };
        reader.readAsDataURL(croppedFile);
        
        // Update the variation files array
        const variationIndex = currentFileInput.closest('.variation-box').dataset.index;
        variationFiles[variationIndex] = [croppedFile];
        
        // Close modal and cleanup
        cancelCrop();
      }, 'image/jpeg', 0.9);
    }
    
    // Update the file input change handler
    function addVariation(data = {}) {
      const index = data.index ?? variationIndex;
      const container = document.createElement("div");
      container.className = "variation-box";
      container.dataset.index = index;

      container.innerHTML = `
        <span class="remove-btn" onclick="this.parentElement.remove()">&times;</span>
        <div class="row g-3 align-items-end">
          <div class="col-md-3">
            <label>Size</label>
            <select name="variations[${index}][size]" class="form-select" required>
              <option value="">Select</option>
              <% sizes.forEach(size => { %>
                <option value="<%= size.size %>" ${data.size === "<%= size.size %>" ? 'selected' : ''}><%= size.size %></option>
              <% }) %>
            </select>
          </div>
          <div class="col-md-3">
            <label>Color</label>
            <select name="variations[${index}][color]" class="form-select" required>
              <option value="">Select</option>
              <% colors.forEach(color => { %>
                <option value="<%= color.color %>" ${data.color === "<%= color.color %>" ? 'selected' : ''}><%= color.color %></option>
              <% }) %>
            </select>
          </div>
          <div class="col-md-2">
            <label>Stock Quantity</label>
            <input type="number" name="variations[${index}][stock]" class="form-control" min="0" value="${data.stock ?? ''}" required />
          </div>
          <div class="col-md-4">
            <label>Images</label>
            <button type="button" class="btn btn-outline-secondary w-100" onclick="triggerImageUpload(this)">+ Add Image</button>
            <input type="file" accept="image/*" style="display:none" multiple />
            <div class="image-preview mt-2">
              ${(data.images || []).map(url => `<img src="${url}" />`).join('')}
            </div>
          </div>
        </div>
      `;

      const fileInput = container.querySelector('input[type="file"]');
      const previewBox = container.querySelector(".image-preview");
      variationFiles[index] = [];

      fileInput.addEventListener("change", function () {
        const files = Array.from(this.files);
        if (files.length > 0) {
          startCrop(files[0], this, previewBox);
        }
      });

      document.getElementById("variationsContainer").appendChild(container);
      variationIndex = Math.max(variationIndex, index + 1);
    }
  </script>
</body>
</html>